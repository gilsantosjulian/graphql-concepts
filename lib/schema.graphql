"----------- Level types validation -----------"
enum Level {
  beginner
  medium
  advance
}

"----------- Courses -----------"
type Course {
  _id: ID!,
  title: String!,
  teacher: String,
  description: String!,
  topic: String,
  people: [Student],
  level: Level
}

input CourseInput {
  title: String!,
  teacher: String,
  description: String!,
  topic: String,
  level: Level
}

input CourseEditInput {
  title: String,
  teacher: String,
  description: String,
  topic: String,
}

"----------- Students -----------"

type Student {
  _id: ID!
  email: String!
  name: String!
}

input StudentInput {
  email: String!,
  name: String!,
}

input StudentEditInput {
  email: String,
  name: String,
}

"----------- Queries and Mutations -----------"

type Query {
  "Return all courses"
  courses: [Course]
  "Return one course"
  course(id: ID!): Course
  "Return all students"
  students: [Student]
  "Return one student"
  student(id: ID!): Student
}

type Mutation {
  "Create a course, ! -> mandatory"
  createCourse(input: CourseInput!): Course
  "Edit a course"
  editCourse(_id: ID!, input: CourseEditInput): Course
  "Delete a course"
  deleteCourse(_id: ID!): Course
  "Add person to one course"
  addPeople(courseID: ID!, personID: ID!): Course
  "Create a student"
  createStudent(input: StudentInput!): Student
  "Edit a student"
  editStudent(_id: ID!, input: StudentEditInput): Student
  "Delete a student"
  deleteStudent(_id: ID!): Student
}