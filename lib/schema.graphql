"----------- Level types validation -----------"
enum Level {
  beginner
  medium
  advance
}

"----------- Courses -----------"
type Course {
  _id: ID!,
  title: String!,
  teacher: String,
  description: String!,
  topic: String,
  people: [Student],
  level: Level
}

input CourseInput {
  title: String!,
  teacher: String,
  description: String!,
  topic: String,
  level: Level
}

input CourseEditInput {
  title: String,
  teacher: String,
  description: String,
  topic: String,
}

"----------- People -----------"

interface Person {
  _id: ID!
  email: String!
  name: String!
}

type Student implements Person {
  _id: ID!
  email: String!
  name: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  email: String!
  name: String!
  phone: String
}

input PersonInput {
  email: String!,
  name: String!,
  phone: String,
  avatar: String,
}

input PersonEditInput {
  email: String,
  name: String,
  phone: String,
  avatar: String,
}

"----------- Queries and Mutations -----------"

type Query {
  "Return all courses"
  courses: [Course]
  "Return one course"
  course(id: ID!): Course
  "Return all people"
  people: [Person]
  "Return one person"
  person(id: ID!): Person
}

type Mutation {
  "Create a course, ! -> mandatory"
  createCourse(input: CourseInput!): Course
  "Edit a course"
  editCourse(_id: ID!, input: CourseEditInput): Course
  "Delete a course"
  deleteCourse(_id: ID!): Course
  "Add person to one course"
  addPeople(courseID: ID!, personID: ID!): Course
  "Create a person"
  createPerson(input: PersonInput!): Person
  "Edit a person"
  editPerson(_id: ID!, input: PersonEditInput): Person
  "Delete a person"
  deletePerson(_id: ID!): Person
}